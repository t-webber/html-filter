//! This file is not meant for manual editing.
//! This file is automatically generated by `build.rs` script.
//! Any changes made will be discarded.

#[test]
fn auto_doctest_1() {
    use html_parser::prelude::*;
    let html = parse_html("<div />").unwrap();
    if let Html::Tag { tag, .. } = html {
        assert!(tag.as_name() == "div");
    } else {
        unreachable!();
    }
}

#[test]
fn auto_doctest_2() {
    use html_parser::prelude::*;
    let html = parse_html(r#"<a id="std doc" enabled xlink:href="https://std.rs"/>"#).unwrap();
    if let Html::Tag { tag, .. } = html {
        assert!(tag.find_attr_value("enabled").is_none());
        assert!(
            tag.find_attr_value("xlink:href")
                .map(|value| value.as_ref())
                == Some("https://std.rs")
        );
    } else {
        unreachable!()
    }
}

#[test]
fn auto_doctest_3() {
    use html_parser::prelude::*;
    let html = parse_html(r#"<a enabled/>"#).unwrap();
    if let Html::Tag { tag, .. } = html {
        assert!(tag.into_attr_value("enabled").is_none());
    } else {
        unreachable!()
    }
    let html = parse_html(r#"<a id="std doc" href="https://std.rs"/>"#).unwrap();
    if let Html::Tag { tag, .. } = html {
        assert!(
            tag.into_attr_value("href")
                .is_some_and(|value| &value == "https://std.rs")
        );
    } else {
        unreachable!()
    }
}

#[test]
fn auto_doctest_4() {
    use html_parser::prelude::*;
    let _filter = Filter::default().depth(1).tag_name("a");
}
